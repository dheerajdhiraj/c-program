In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence. By convention, the end of the sequence at which elements are added is called the back, tail, or rear of the queue, and the end at which elements are removed is called the head or front of the queue, analogously to the words used when people line up to wait for goods or services.
#include <stdio.h>

#define MAX_SIZE 100
int queue[MAX_SIZE];
int front = -1;
int back = -1;
// Function to insert an element into the queue
void enqueue(int item) {
    if (back == MAX_SIZE - 1) {
        printf("Error: Queue is full\n");
        return;
    }
    if (front == -1) {
        front = 0;
    }
    back++;
    queue[back] = item;
}

// Function to display the elements in the queue
void display() {
    if (front == -1 || front > back) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue elements are: ");
    for (int i = front; i <= back; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}
// Function to check whether the queue is empty
int is_empty() {
    if (front == -1 || front > back) {
        return 1;
    }
    return 0;
}
int main() {
	printf("Initialize a queue!");
    // Insert some elements into the queue.
    printf("\nCheck the queue is empty or not? %s\n", is_empty() ? "Yes" : "No");
	printf("\nInsert some elements into the queue:\n");
    enqueue(1);
    enqueue(2);
    enqueue(3);
    display();
	printf("\nInsert another element into the queue:\n");
    enqueue(4);
    display();
    printf("\nCheck the queue is empty or not? %s\n", is_empty() ? "Yes" : "No");
    return 0;
}






Write a C program to implement a queue using an array. Create a function that removes an element from the queue.

Sample Solution:

C Code:

#include <stdio.h>

#define MAX_SIZE 100
int queue[MAX_SIZE];
int front = -1;
int back = -1;
// Function to insert an element into the queue
void enqueue(int item) {
    if (back == MAX_SIZE - 1) {
        printf("Error: Queue is full\n");
        return;
    }
    if (front == -1) {
        front = 0;
    }
    back++;
    queue[back] = item;
}


// Function to remove an element from a queue
void dequeue() {
    if (front == -1 || front > back) {
        printf("Error: Queue is empty\n");
        return;
    }
    front++;
}

// Function to display the elements in the queue
void display() {
    if (front == -1 || front > back) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue elements are: ");
    for (int i = front; i <= back; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}

int main() {
	printf("Initialize a queue!");
    // Insert some elements into the queue.
	printf("\nInsert some elements into the queue:\n");
    enqueue(1);
    enqueue(2);
    enqueue(3);
    display();
    printf("\nDelete an element from the said queue:\n");
    dequeue();
    display();
	printf("\nInsert another element into the queue:\n");
    enqueue(4);
    display();
    return 0;
}









average of element
#include <stdio.h>

#define MAX_SIZE 100

int queue[MAX_SIZE];
int front = -1, back = -1;

// Function to insert an element into the queue
void enqueue(int item) {
    if (back == MAX_SIZE - 1) {
        printf("Error: Queue is full\n");
        return;
    }
    if (front == -1) {
        front = 0;
    }
    back++;
    queue[back] = item;
}

// Function to remove an element from a queue
int dequeue() {
    if (front == -1 || front > back) {
        printf("Error: Queue is empty\n");
        return -1;
    }
    int item = queue[front];
    front++;
    return item;
}

// Function to compute the average of elements in a queue
float average() {
    if (front == -1 || front > back) {
        printf("Error: Queue is empty\n");
        return -1.0;
    }
    float sum = 0;
    int count = 0;
    for (int i = front; i <= back; i++) {
        sum += queue[i];
        count++;
    }
    float result = sum/count;
    return result;
}
// Function to display the elements in the queue
void display() {
    printf("Queue elements are: ");
    for (int i = front; i <= back; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}
int main() {
    // Insert some elements into the queue.
    enqueue(1);
    enqueue(2);
    enqueue(3);
    enqueue(4);
    enqueue(5);
    // Display the elements in the queue.
    display();
    // Find the sum of the elements in the queue.
    float avg = average();
    printf("Average of the elements in the queue is: %f\n", avg);
    printf("\nRemove 2 elements from the said queue:\n");
    dequeue();
    dequeue();
    // Display the elements in the queue.
    display();
    avg = average();
    printf("Average of the elements in the queue is: %f\n", avg);
    printf("\nInsert 3 more elements:\n");
	enqueue(300);
    enqueue(427);
    enqueue(519);
    // Display the elements in the queue.
    display();
    avg = average();
    printf("Average of the elements in the queue is: %f\n", avg);
    return 0;;
}

Sample Output:

Queue elements are: 1 2 3 4 5 
Average of the elements in the queue is: 3.000000

Remove 2 elements from the said queue:
Queue elements are: 3 4 5 
Average of the elements in the queue is: 4.000000

Insert 3 more elements:
Queue elements are: 3 4 5 300 427 519 
Average of the elements in the queue is: 209.666672